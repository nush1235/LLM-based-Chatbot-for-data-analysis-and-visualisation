# -*- coding: utf-8 -*-
"""4_ResultsAnalysis&Visualisation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/127LR6wHjEGzYIvuxcbkszKfBguqyUOKY
"""

# # Notebook 4: Results Analysis and Visualization
#
# This notebook analyzes the data from `results.csv` generated by the automated benchmark..

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Set plotting style
sns.set_style("whitegrid")
pd.set_option('display.width', 100)
# ## 1. Load Result
try:
    results_df = pd.read_csv('results.csv')
    print("Results data loaded successfully.")
except FileNotFoundError:
    print("Error: 'results.csv' not found.")
    results_df = pd.DataFrame()

 ## 2. Functional Correctness Analysis
# This will show a 0% pass rate(key finding)
if not results_df.empty:
    accuracy = results_df.groupby('model_id')['passed'].mean().reset_index()
    accuracy['pass_rate_%'] = accuracy['passed'] * 100
    print("Table: Overall Functional Correctness (Pass Rate)\n")
    print(accuracy[['model_id', 'pass_rate_%']].to_string(index=False))

    plt.figure(figsize=(8, 5))
    sns.barplot(data=accuracy, x='model_id', y='pass_rate_%', hue='model_id', palette='viridis', dodge=False)
    plt.title('Functional Correctness: Pass Rate (%) by Model')
    plt.ylabel('Pass Rate (%)')
    plt.xlabel('Model')
    plt.ylim(0, 100)
    plt.legend([],[], frameon=False)
    plt.show()

## 3. Latency Analysis
if not results_df.empty:
    latency = results_df.groupby('model_id')['latency'].mean().reset_index()
    latency.rename(columns={'latency': 'avg_latency_s'}, inplace=True)
    print("\nTable: System Latency Comparison\n")
    print(latency.to_string(index=False))

    plt.figure(figsize=(8, 5))
    sns.barplot(data=latency, x='model_id', y='avg_latency_s', hue='model_id', palette='plasma', dodge=False)
    plt.title('Average System Latency by Model')
    plt.ylabel('Average Latency (seconds)')
    plt.xlabel('Model')
    plt.legend([],[], frameon=False)
    plt.show()

## 4. Failure Analysis
if not results_df.empty:
    failures_df = results_df[results_df['passed'] == 0].copy()

    def categorize_error(row):
        error_str = str(row['error'])
        # If there's no execution error, it's a logical flaw.
        if pd.isna(row['error']):
            return 'Logical Flaw'
        if 'SyntaxError' in error_str:
            return 'Syntax Error'
        if 'NameError' in error_str or 'AttributeError' in error_str:
            return 'Hallucination'
        return 'Misinterpretation / Other'

    if not failures_df.empty:
        failures_df['error_type'] = failures_df.apply(categorize_error, axis=1)
        error_dist = failures_df.groupby(['model_id', 'error_type']).size().unstack(fill_value=0)
        error_dist_percent = error_dist.apply(lambda x: x / x.sum() * 100, axis=1)
        print("\nTable: Distribution of Error Types for Failed Attempts (%)\n")
        print(error_dist_percent)

        error_dist_percent.plot(kind='bar', stacked=True, figsize=(10, 6))
        plt.title('Distribution of Error Types on Failed Attempts')
        plt.ylabel('Percentage of Failures')
        plt.xlabel('Model')
        plt.xticks(rotation=0)
        plt.legend(title='Error Type', bbox_to_anchor=(1.05, 1), loc='upper left')
        plt.show()
    else:
        print("\nNo failures were recorded in the sample run.")